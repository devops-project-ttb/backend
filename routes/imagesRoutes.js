import AIClient from "../services/aiClient.js";
import dotenv from "dotenv";
import axios from "axios";
import { findSimilarItem, addItemToUser } from "../models/item.js";
dotenv.config();

const aiClient = new AIClient(process.env.GEMINI_API_KEY); // Utilisation de la cl√© API stock√©e

export default async function imageRoutes(fastify, options) {
  fastify.post("/images/analyze", async (request, reply) => {
    try {
      const { imageUrl, user_id } = request.body;

      if (!imageUrl) {
        return reply.code(400).send({ error: "L'URL de l'image est requise." });
      }

      const prompt = `
Tu es un expert en ≈ìnologie et en bi√©rologie. Analyse cette image d‚Äôune bouteille de vin ou de bi√®re et retourne **uniquement** un JSON **valide** parfaitement conforme au sch√©ma suivant, sans texte additionnel, sans mise en forme, sans explication, ni balises de code.

Voici le format attendu, qui correspond au mod√®le d'une entit√© "Item" dans une base de donn√©es :

{
  "item_name": "Nom complet de la boisson (marque + type + cuv√©e)",
  "type_id": "1" si bi√®re et "0" si vin,
  "provenance": "Domaine ou brasserie, Ville, Pays",
  "description": "Description d√©taill√©e des caract√©ristiques de la boisson (style, ar√¥mes, saveurs, process de fabrication...)",
  "aromes": ["ar√¥me principal 1", "ar√¥me 2", "ar√¥me 3"],
  "accords": ["plat ou fromage 1", "plat 2", "dessert 3"],
  "note": Note sur 10 en chiffre entier (si absente, mets null),
  "image": null
}
`;

      // üîç Analyse de l'image via Gemini
      const result = await aiClient.analyzeImage({
        model: "gemini-1.5-flash",
        imageUrl,
        prompt,
      });
      // üõ† Nettoyer la r√©ponse et extraire le JSON
      const cleanedResult = result.replace(/```json|```/g, "").trim();
      console.log("R√©ponse brute de Gemini :", cleanedResult);
      // üìå V√©rification si la r√©ponse est bien un JSON
      let jsonResponse;
      try {
        jsonResponse = JSON.parse(cleanedResult);
      } catch (parseError) {
        console.error("Erreur de parsing JSON :", parseError);
        return reply
          .code(500)
          .send({ error: "La r√©ponse de l'IA n'est pas un JSON valide." });
      }
      const similarItem = await findSimilarItem(jsonResponse.item_name);
      console.log("Item similaire trouv√© :", similarItem);
      if (similarItem) {
        await addItemToUser(user_id, similarItem.item_id);
        return reply.send({
          message: "Boisson d√©j√† connue",
          data: similarItem,
        });
      } else {
        const n8n_response = await axios.get(
          "https://n8n-g6sm.onrender.com/webhook/scan",
          {
            data: {
              jsonResponse,
            },
          }
        );
        return reply.send({ message: "Analyse r√©ussie", data: jsonResponse });
      }
    } catch (error) {
      console.error("Erreur lors de l'analyse de l'image :", error);
      reply.code(500).send({ error: "Erreur lors de l'analyse de l'image." });
    }
  });

  fastify.post("/images/answer", async (request, reply) => {
    try {
      const { prompt } = request.body;

      if (!prompt) {
        return reply.code(400).send({ error: "La question est requise." });
      }

      // üîç R√©ponse √† la question via Gemini
      const result = await aiClient.answerPrompt(prompt);
      console.log(result);

      return reply.send({ message: "R√©ponse r√©ussie", data: result });
    } catch (error) {
      console.error("Erreur lors de la r√©ponse √† la question :", error);
      reply
        .code(500)
        .send({ error: "Erreur lors de la r√©ponse √† la question." });
    }
  });
}
